## system

You are a data engineer assistant, that help you to write SQL queries.
You avoid unnecessary talk and get straight to the point.
Note that as an LLM, you have general knowledge that you can also use.

Exchange protocol:
- If you output a SQL query, I will run it and show you the result (first 10 rows).
- If there is none, don't forget you can explore the database tables & values with SQL.
- If you have an anomaly or something weird, you should try to verify it and/or find alternative ways.
- If you want to display graph, you need to output fusionchart-yaml with context, xAxisName, yAxisName, outputType, sql.
- Tip: always use quote on column & table name (otherwise Postgres interpret as lowercase)
- We can only show so much data. If you want to display more content from SQL, ask for less information.
- Add to memory information that you want to think could be useful for futur need.

## user
DATABASE
- name: bike
- engine: postgres
MEMORY: No memory

Show stations in san jose installed in 2012

## assistant
> SEARCH_IN_MEMORY(search="station san jose installed 2012")

## function
[]

## assistant
> SQL_QUERY(name="database tables", query=```SELECT table_schema, table_name
FROM information_schema.tables
WHERE table_schema NOT IN ('pg_catalog', 'information_schema')```)

## function
"table_schema","table_name"
"public","station"
"public","station_info"
"public","status"

## assistant
> SAVE_TO_MEMORY(text="There are 3 tables in schema public : station, station_info, status")

## assistant
> SQL_QUERY(name="public.station columns", query=```SELECT column_name, data_type, is_nullable, column_default
FROM information_schema.columns
WHERE table_name = 'station'
AND table_schema = 'public';```)

## function
"column_name","data_type","is_nullable","column_default"
"id","integer","NO",
"name","text","YES",
"lat","numeric","YES",
"long","numeric","YES",
"dock_count","integer","YES",
"city","text","YES",
"installation_date","text","YES",

## assistant
> SAVE_TO_MEMORY(text="There are 7 columns in table public.station : id, name, lat, long, dock_count, city, installation_date")

## assistant
> SQL_QUERY(name="number of stations per city", query=```
SELECT "city", COUNT(*)
FROM "public"."station"
GROUP BY 1```)

## function
"city","count"
"Palo Alto",5
"San Jose",16
"Redwood City",7
"San Francisco",35
"Mountain View",7

## assistant
> SQL_QUERY(name="station in San Jose, installed in 2012", query="SELECT *
FROM "public"."station"
WHERE "city" = 'San Jose' AND date_part('year', "installation_date") = 2012;")

## function
ERROR: function date_part(unknown, text) does not exist
LINE 3: WHERE city = 'San Jose' AND date_part('year', installation_d...
^
HINT: No function matches the given name and argument types. You might need to add explicit type casts.

## assistant
> SQL_QUERY(name="installation_date column examples", query=```SELECT "installation_date"
FROM "public"."station"
ORDER BY RANDOM()
LIMIT 5;```)

## function
"installation_date"
"8/6/2013"
"8/20/2013"
"8/21/2013"
"8/23/2013"
"8/6/2013"

## assistant
> SQL_QUERY(name="station in San Jose, installed in 2012", query=```SELECT *
FROM "public"."station"
WHERE "city" = 'San Jose' AND EXTRACT(YEAR FROM "installation_date"::date) = 2012;```)

## function
"id","name","lat","long","dock_count","city","installation_date"
2,"San Jose Diridon Caltrain Station",37.329732,-121.901782000000011405,27,"San Jose","8/6/2012"
3,"San Jose Civic Center",37.330698,-121.888979,15,"San Jose","8/5/2012"
4,"Santa Clara at Almaden",37.333988,-121.894902,11,"San Jose","8/6/2012"
5,"Adobe on Almaden",37.331415,-121.8932,19,"San Jose","8/5/2012"
6,"San Pedro Square",37.3367210000000042673,-121.894074,15,"San Jose","8/7/2012"

## assistant
Ok. They have been 6 station in San Jose:
- San Jose Diridon Caltrain Station
- San Jose Civic Center
- Santa Clara at Almaden
- Adobe on Almaden
- San Pedro Square

## user
Plot distribution of stations per city

## assistant
```yml-graph
name: Distribution of stations per city
outputType: Doughnut2d
xAxisName: City
yAxisName: Number of stations
xKey: city
yKey: count
sql: "SELECT city, COUNT(*) as \"count\"\nFROM public.station\nGROUP BY city"
```

## user
show electric station

## assistant
> SEARCH_IN_MEMORY(search="electric station")

## function
Previous queries:

--- query: Electric stations per city
```sql
SELECT station.city, COUNT(*)
FROM station
JOIN station_info USING (id)
WHERE station_info.electric IS TRUE
GROUP BY 1
```

## assistant
> SQL_QUERY(name="electric stations name", query=```SELECT station.name
FROM station
JOIN station_info USING (id)
WHERE station_info.electric IS TRUE```)

## function
"name"
"Santa Clara at Almaden"
"San Pedro Square"
"Japantown"

## assistant
There are 3 electric stations:
- Santa Clara at Almaden
- San Pedro Square
- Japantown
