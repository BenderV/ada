{
    "name": "PLOT_WIDGET",
    "description": "Display a plot (using FusionCharts)",
    "parameters": {
      "type": "object",
      "properties": {
        "caption": {
          "type": "string",
          "description": "Widget caption"
        },
        "outputType": {
          "type": "string",
          "description": "Output type. MS stands for multiseries",
          "enum": [
            "Column3D",
            "Column2D",
            "Line",
            "Area2D",
            "Bar2D",
            "Pie2D",
            "Pie3D",
            "Doughnut2D",
            "Doughnut3D",
            "Pareto2D",
            "Pareto3D",
            "MSColumn2D",
            "MSColumn3D",
            "MSLine",
            "MSBar2D",
            "MSBar3D",
            "MSArea",
            "Marimekko",
            "ZoomLine",
            "StackedColumn3D",
            "StackedColumn2D",
            "StackedBar2D",
            "StackedBar3D",
            "StackedArea2D",
            "MSStackedColumn2D",
            "MSCombi3D",
            "MSCombi2D",
            "MSColumnLine3D",
            "StackedColumn2DLine",
            "StackedColumn3DLine",
            "MSCombiDY2D",
            "MSColumn3DLineDY",
            "StackedColumn3DLineDY",
            "MSStackedColumn2DLineDY",
            "Scatter",
            "Bubble",
            "ScrollColumn2D",
            "ScrollLine2D",
            "ScrollArea2D",
            "ScrollStackedColumn2D",
            "ScrollCombi2D",
            "ScrollCombiDY2D",
            "SSGrid"
          ]
        },
        "sql": {
          "type": "string",
          "description": "FusionCharts configuration object. If you want to display a multiseries chart, you need to set the seriesKey"
        },
        "params": {
          "type": "object",
          "description": "Widget parameters"
        },
        "data_preprocessing": {
          "type": "string",
          "description": "Python code to transform result from SQL so it can be rendered by FusionCharts. It has access to 'result' variable. The transformed result should be stored in 'processed_result' variable. data usual types = {'data': [{label: str, value: int}]}. Common fields are 'data', 'datasets', 'categories'",
          "example": "import pandas as pd\ndf = pd.DataFrame(result)\nprocessed_result = df.groupby('category').sum().reset_index().to_dict('records')"
        }
      },
      "required": ["caption", "outputType", "sql", "params"]
    }
}
